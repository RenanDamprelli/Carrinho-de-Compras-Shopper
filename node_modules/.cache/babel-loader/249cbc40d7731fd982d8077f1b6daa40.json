{"ast":null,"code":"'use strict';\n/* eslint-disable no-continue, eqeqeq */\n\nconst isObject = val => typeof val === 'object' || typeof val === 'function';\n\nconst isProto = (val, obj) => val == '__proto__' || val == 'constructor' && typeof obj.constructor === 'function';\n\nconst set = (obj, parts, length, val) => {\n  let tmp = obj;\n  let i = 0;\n\n  for (; i < length - 1; i++) {\n    const part = parts[i];\n\n    if (isProto(part, tmp)) {\n      continue;\n    }\n\n    tmp = !isObject(tmp[part]) ? tmp[part] = {} : tmp[part];\n  }\n\n  tmp[parts[i]] = val;\n  return obj;\n};\n/**\n* Sets nested values on an object using a dot path or custom separator\n* @param {Object} obj\n* @param {String|Array} path\n* @param {Any} val\n* @param {String} [sep = '.']\n* @returns {Object}\n*/\n\n\nmodule.exports = function (obj, path, val) {\n  let sep = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '.';\n\n  if (!isObject(obj) || !path || !path.length) {\n    return obj;\n  }\n\n  const parts = Array.isArray(path) ? path : String(path).split(sep);\n\n  if (isProto(parts[0], obj)) {\n    return obj;\n  }\n\n  const {\n    length\n  } = parts;\n\n  if (length === 1) {\n    obj[parts[0]] = val;\n    return obj;\n  }\n\n  return set(obj, parts, length, val);\n};","map":{"version":3,"names":["isObject","val","isProto","obj","constructor","set","parts","length","tmp","i","part","module","exports","path","sep","Array","isArray","String","split"],"sources":["C:/Users/hamlo/Desktop/REACT/simple-ecart/node_modules/@strikeentco/set/main.js"],"sourcesContent":["'use strict';\n\n/* eslint-disable no-continue, eqeqeq */\n\nconst isObject = (val) => typeof val === 'object' || typeof val === 'function';\nconst isProto = (val, obj) => val == '__proto__' || (val == 'constructor' && typeof obj.constructor === 'function');\nconst set = (obj, parts, length, val) => {\n  let tmp = obj;\n  let i = 0;\n  for (; i < length - 1; i++) {\n    const part = parts[i];\n    if (isProto(part, tmp)) {\n      continue;\n    }\n    tmp = !isObject(tmp[part]) ? tmp[part] = {} : tmp[part];\n  }\n  tmp[parts[i]] = val;\n  return obj;\n};\n\n/**\n* Sets nested values on an object using a dot path or custom separator\n* @param {Object} obj\n* @param {String|Array} path\n* @param {Any} val\n* @param {String} [sep = '.']\n* @returns {Object}\n*/\nmodule.exports = (obj, path, val, sep = '.') => {\n  if (!isObject(obj) || !path || !path.length) {\n    return obj;\n  }\n  const parts = Array.isArray(path) ? path : String(path).split(sep);\n  if (isProto(parts[0], obj)) {\n    return obj;\n  }\n  const { length } = parts;\n  if (length === 1) {\n    obj[parts[0]] = val;\n    return obj;\n  }\n  return set(obj, parts, length, val);\n};\n"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,QAAQ,GAAIC,GAAD,IAAS,OAAOA,GAAP,KAAe,QAAf,IAA2B,OAAOA,GAAP,KAAe,UAApE;;AACA,MAAMC,OAAO,GAAG,CAACD,GAAD,EAAME,GAAN,KAAcF,GAAG,IAAI,WAAP,IAAuBA,GAAG,IAAI,aAAP,IAAwB,OAAOE,GAAG,CAACC,WAAX,KAA2B,UAAxG;;AACA,MAAMC,GAAG,GAAG,CAACF,GAAD,EAAMG,KAAN,EAAaC,MAAb,EAAqBN,GAArB,KAA6B;EACvC,IAAIO,GAAG,GAAGL,GAAV;EACA,IAAIM,CAAC,GAAG,CAAR;;EACA,OAAOA,CAAC,GAAGF,MAAM,GAAG,CAApB,EAAuBE,CAAC,EAAxB,EAA4B;IAC1B,MAAMC,IAAI,GAAGJ,KAAK,CAACG,CAAD,CAAlB;;IACA,IAAIP,OAAO,CAACQ,IAAD,EAAOF,GAAP,CAAX,EAAwB;MACtB;IACD;;IACDA,GAAG,GAAG,CAACR,QAAQ,CAACQ,GAAG,CAACE,IAAD,CAAJ,CAAT,GAAuBF,GAAG,CAACE,IAAD,CAAH,GAAY,EAAnC,GAAwCF,GAAG,CAACE,IAAD,CAAjD;EACD;;EACDF,GAAG,CAACF,KAAK,CAACG,CAAD,CAAN,CAAH,GAAgBR,GAAhB;EACA,OAAOE,GAAP;AACD,CAZD;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAQ,MAAM,CAACC,OAAP,GAAiB,UAACT,GAAD,EAAMU,IAAN,EAAYZ,GAAZ,EAA+B;EAAA,IAAda,GAAc,uEAAR,GAAQ;;EAC9C,IAAI,CAACd,QAAQ,CAACG,GAAD,CAAT,IAAkB,CAACU,IAAnB,IAA2B,CAACA,IAAI,CAACN,MAArC,EAA6C;IAC3C,OAAOJ,GAAP;EACD;;EACD,MAAMG,KAAK,GAAGS,KAAK,CAACC,OAAN,CAAcH,IAAd,IAAsBA,IAAtB,GAA6BI,MAAM,CAACJ,IAAD,CAAN,CAAaK,KAAb,CAAmBJ,GAAnB,CAA3C;;EACA,IAAIZ,OAAO,CAACI,KAAK,CAAC,CAAD,CAAN,EAAWH,GAAX,CAAX,EAA4B;IAC1B,OAAOA,GAAP;EACD;;EACD,MAAM;IAAEI;EAAF,IAAaD,KAAnB;;EACA,IAAIC,MAAM,KAAK,CAAf,EAAkB;IAChBJ,GAAG,CAACG,KAAK,CAAC,CAAD,CAAN,CAAH,GAAgBL,GAAhB;IACA,OAAOE,GAAP;EACD;;EACD,OAAOE,GAAG,CAACF,GAAD,EAAMG,KAAN,EAAaC,MAAb,EAAqBN,GAArB,CAAV;AACD,CAdD"},"metadata":{},"sourceType":"script"}